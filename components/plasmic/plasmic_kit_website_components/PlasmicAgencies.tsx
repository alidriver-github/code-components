// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: jHFCHH5QQ7K
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CommonLandingPage2 from "../../CommonLandingPage2"; // plasmic-import: vfJVtA9eRVA/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: lJppbKgSOw/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import Divider from "../../Divider"; // plasmic-import: SQHouqji3_/component
import SmallValuePropCard from "../../SmallValuePropCard"; // plasmic-import: ZsmzGgkZw2/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k7xdGnvUtPZ_s/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicAgencies.module.css"; // plasmic-import: jHFCHH5QQ7K/css

import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: mrC2Ljeqti/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: YhhYiXTtXT/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 5amV9exkN9/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: E2O_OGnBZf/icon

export type PlasmicAgencies__VariantMembers = {};

export type PlasmicAgencies__VariantsArgs = {};
type VariantPropType = keyof PlasmicAgencies__VariantsArgs;
export const PlasmicAgencies__VariantProps = new Array<VariantPropType>();

export type PlasmicAgencies__ArgsType = {};
type ArgPropType = keyof PlasmicAgencies__ArgsType;
export const PlasmicAgencies__ArgProps = new Array<ArgPropType>();

export type PlasmicAgencies__OverridesType = {
  root?: p.Flex<"div">;
  commonLandingPage2?: p.Flex<typeof CommonLandingPage2>;
  valueA13?: p.Flex<typeof SmallValuePropCard>;
  valueA23?: p.Flex<typeof SmallValuePropCard>;
  valueA222222?: p.Flex<typeof SmallValuePropCard>;
  valueA222?: p.Flex<typeof SmallValuePropCard>;
  valueA2322?: p.Flex<typeof SmallValuePropCard>;
  valueA22322?: p.Flex<typeof SmallValuePropCard>;
};

export interface DefaultAgenciesProps {
  dataFetches: PlasmicAgencies__Fetches;
}

function PlasmicAgencies__RenderFunc(props: {
  variants: PlasmicAgencies__VariantsArgs;
  args: PlasmicAgencies__ArgsType;
  overrides: PlasmicAgencies__OverridesType;
  dataFetches?: PlasmicAgencies__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">
          {"Plasmic - the ultimate page builder for digital agencies"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={"Plasmic - the ultimate page builder for digital agencies"}
        />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style global jsx>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <CommonLandingPage2
            data-plasmic-name={"commonLandingPage2"}
            data-plasmic-override={overrides.commonLandingPage2}
            children2={
              "Plug into your existing codebase. Use any framework, backend, hosting, CMS, and more."
            }
            className={classNames("__wab_instance", sty.commonLandingPage2)}
            container={
              <React.Fragment>
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__fSLkI)}
                  role={"img"}
                  src={
                    "/plasmic/plasmic_kit_website_components/images/image.svg"
                  }
                />

                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__bz5AV)}
                  role={"img"}
                  src={
                    "/plasmic/plasmic_kit_website_components/images/image3.svg"
                  }
                />

                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img___5Xxop)}
                  role={"img"}
                  src={
                    "/plasmic/plasmic_kit_website_components/images/image4.svg"
                  }
                />

                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img___7DaB8)}
                  role={"img"}
                  src={
                    "/plasmic/plasmic_kit_website_components/images/image8.svg"
                  }
                />

                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img___4FEas)}
                  role={"img"}
                  src={
                    "/plasmic/plasmic_kit_website_components/images/image53.png"
                  }
                />

                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__bWm1Y)}
                  role={"img"}
                  src={
                    "/plasmic/plasmic_kit_website_components/images/image9.svg"
                  }
                />

                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__o1C5X)}
                  role={"img"}
                  src={
                    "/plasmic/plasmic_kit_website_components/images/image11.svg"
                  }
                />

                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__jbnB)}
                  role={"img"}
                  src={
                    "/plasmic/plasmic_kit_website_components/images/image12.png"
                  }
                />
              </React.Fragment>
            }
            slot={
              <span>
                <React.Fragment>
                  {"Build engaging digital experiences ⚡️ "}
                </React.Fragment>
                <span style={{ fontStyle: "italic" }}>{"fast"}</span>
                <React.Fragment>{"."}</React.Fragment>
              </span>
            }
            slot2={
              "The web design tool that works seamlessly with your tech stack. The visual CMS that clients love."
            }
            slot3={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__iybui)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__r82ZB)}
                >
                  <SmallValuePropCard
                    data-plasmic-name={"valueA13"}
                    data-plasmic-override={overrides.valueA13}
                    actionButton={null}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__pxlSw)}
                        loading={"lazy" as const}
                        role={"img"}
                        src={
                          "/plasmic/plasmic_kit_website_components/images/image87.png"
                        }
                      />
                    }
                  >
                    {"Landing pages"}
                  </SmallValuePropCard>

                  <SmallValuePropCard
                    data-plasmic-name={"valueA23"}
                    data-plasmic-override={overrides.valueA23}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA23)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__vVpdo)}
                        loading={"lazy" as const}
                        role={"img"}
                        src={
                          "/plasmic/plasmic_kit_website_components/images/image41Png.png"
                        }
                      />
                    }
                  >
                    {"Conversion pages"}
                  </SmallValuePropCard>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box___1CnLx)}
                >
                  <SmallValuePropCard
                    data-plasmic-name={"valueA222222"}
                    data-plasmic-override={overrides.valueA222222}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA222222)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__nKnNj)}
                        loading={"lazy" as const}
                        role={"img"}
                        src={
                          "/plasmic/plasmic_kit_website_components/images/image82.png"
                        }
                      />
                    }
                  >
                    {"Announcement bars"}
                  </SmallValuePropCard>

                  <SmallValuePropCard
                    data-plasmic-name={"valueA222"}
                    data-plasmic-override={overrides.valueA222}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA222)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img___2TIb)}
                        role={"img"}
                        src={
                          "/plasmic/plasmic_kit_website_components/images/image78.png"
                        }
                      />
                    }
                  >
                    {"Offer overlays"}
                  </SmallValuePropCard>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box___1EAqT)}
                >
                  <SmallValuePropCard
                    data-plasmic-name={"valueA2322"}
                    data-plasmic-override={overrides.valueA2322}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA2322)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img___8Yaaq)}
                        loading={"lazy" as const}
                        role={"img"}
                        src={
                          "/plasmic/plasmic_kit_website_components/images/image86.png"
                        }
                      />
                    }
                  >
                    {"Heroes"}
                  </SmallValuePropCard>

                  <SmallValuePropCard
                    data-plasmic-name={"valueA22322"}
                    data-plasmic-override={overrides.valueA22322}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA22322)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__fbWsv)}
                        loading={"lazy" as const}
                        role={"img"}
                        src={
                          "/plasmic/plasmic_kit_website_components/images/image85.png"
                        }
                      />
                    }
                  >
                    {"Promotional sections"}
                  </SmallValuePropCard>
                </p.Stack>
              </p.Stack>
            }
            slot4={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__kdl97)}
              >
                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__wZbYg
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon12Icon
                        className={classNames(defaultcss.all, sty.svg__ms3F4)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"No-code autonomy."}
                >
                  {
                    "Easy-to-use but powerful drag-and-drop builder to create web experiences incredibly fast."
                  }
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__rjeIu)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__fAyAi
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon20Icon
                        className={classNames(defaultcss.all, sty.svg__rz3Jr)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Limitless speed."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__wh4JV
                    )}
                  >
                    {"The only WYSIWYG builder that never limits you."}
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__n2Jk)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__splQt
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon22Icon
                        className={classNames(defaultcss.all, sty.svg___9DMgQ)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Free up developers."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__ig6KD
                    )}
                  >
                    {
                      "Empower content editors and designers. Let developers focus on code rather than pixel-pushing."
                    }
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__ncye7)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__cUae
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon27Icon
                        className={classNames(defaultcss.all, sty.svg__jWyKo)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Hit the ground running."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__mimWl
                    )}
                  >
                    {
                      "Use your existing design system, import from Figma, or grab our templates."
                    }
                  </div>
                </ValuePropListItem>
              </p.Stack>
            }
            slot6={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__dpP3)}
                role={"img"}
                src={
                  "/plasmic/plasmic_kit_website_components/images/websiteHeroImageTinypng.png"
                }
              />
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "commonLandingPage2",
    "valueA13",
    "valueA23",
    "valueA222222",
    "valueA222",
    "valueA2322",
    "valueA22322"
  ],
  commonLandingPage2: [
    "commonLandingPage2",
    "valueA13",
    "valueA23",
    "valueA222222",
    "valueA222",
    "valueA2322",
    "valueA22322"
  ],
  valueA13: ["valueA13"],
  valueA23: ["valueA23"],
  valueA222222: ["valueA222222"],
  valueA222: ["valueA222"],
  valueA2322: ["valueA2322"],
  valueA22322: ["valueA22322"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  commonLandingPage2: typeof CommonLandingPage2;
  valueA13: typeof SmallValuePropCard;
  valueA23: typeof SmallValuePropCard;
  valueA222222: typeof SmallValuePropCard;
  valueA222: typeof SmallValuePropCard;
  valueA2322: typeof SmallValuePropCard;
  valueA22322: typeof SmallValuePropCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAgencies__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAgencies__VariantsArgs;
    args?: PlasmicAgencies__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAgencies__Fetches;
  } & Omit<PlasmicAgencies__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAgencies__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAgencies__ArgProps,
      internalVariantPropNames: PlasmicAgencies__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAgencies__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAgencies";
  } else {
    func.displayName = `PlasmicAgencies.${nodeName}`;
  }
  return func;
}

export const PlasmicAgencies = Object.assign(
  // Top-level PlasmicAgencies renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    commonLandingPage2: makeNodeComponent("commonLandingPage2"),
    valueA13: makeNodeComponent("valueA13"),
    valueA23: makeNodeComponent("valueA23"),
    valueA222222: makeNodeComponent("valueA222222"),
    valueA222: makeNodeComponent("valueA222"),
    valueA2322: makeNodeComponent("valueA2322"),
    valueA22322: makeNodeComponent("valueA22322"),

    // Metadata about props expected for PlasmicAgencies
    internalVariantProps: PlasmicAgencies__VariantProps,
    internalArgProps: PlasmicAgencies__ArgProps
  }
);

export default PlasmicAgencies;
/* prettier-ignore-end */
