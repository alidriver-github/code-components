// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aPZu6epBt5EaEYRgMF1d6z
// Component: 8TANbVpBXy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Tilt } from "../../Tilt"; // plasmic-import: uJIZpEcIF1/codeComponent
import { CmsGallery } from "../../ItemGallery"; // plasmic-import: jdQsBFXPKI/codeComponent
import { GoogleMap } from "@react-google-maps/api"; // plasmic-import: JpRCwVFY78Q/codeComponent

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AeNTI-zK4Ow6K/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_code_component_examples.module.css"; // plasmic-import: aPZu6epBt5EaEYRgMF1d6z/projectcss
import * as sty from "./PlasmicTemp.module.css"; // plasmic-import: 8TANbVpBXy/css

export type PlasmicTemp__VariantMembers = {};

export type PlasmicTemp__VariantsArgs = {};
type VariantPropType = keyof PlasmicTemp__VariantsArgs;
export const PlasmicTemp__VariantProps = new Array<VariantPropType>();

export type PlasmicTemp__ArgsType = {};
type ArgPropType = keyof PlasmicTemp__ArgsType;
export const PlasmicTemp__ArgProps = new Array<ArgPropType>();

export type PlasmicTemp__OverridesType = {
  root?: p.Flex<"div">;
  tilt?: p.Flex<typeof Tilt>;
  productGallery?: p.Flex<typeof CmsGallery>;
  map?: p.Flex<typeof GoogleMap>;
};

export interface DefaultTempProps {
  dataFetches: PlasmicTemp__Fetches;
}

function PlasmicTemp__RenderFunc(props: {
  variants: PlasmicTemp__VariantsArgs;
  args: PlasmicTemp__ArgsType;
  overrides: PlasmicTemp__OverridesType;
  dataFetches?: PlasmicTemp__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style global jsx>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.box__m0Ci)}>
            <Tilt
              data-plasmic-name={"tilt"}
              data-plasmic-override={overrides.tilt}
              className={classNames("__wab_instance", sty.tilt)}
              reset={false}
              tiltReverse={true}
              trackOnWindow={false}
            >
              <div className={classNames(defaultcss.all, sty.box__rec)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    sty.box__x2UQy,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? ("inner-element" as const)
                      : ("inner-element" as const)
                  )}
                />
              </div>
            </Tilt>
          </div>

          <CmsGallery
            data-plasmic-name={"productGallery"}
            data-plasmic-override={overrides.productGallery}
            className={classNames("__wab_instance", sty.productGallery)}
            scroller={
              hasVariant(globalVariants, "screen", "mobile") ? true : true
            }
          />

          <GoogleMap
            data-plasmic-name={"map"}
            data-plasmic-override={overrides.map}
            center={{ lat: -5, lng: -40 }}
            mapContainerClassName={classNames("__wab_instance", sty.map)}
            zoom={6 as const}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tilt", "productGallery", "map"],
  tilt: ["tilt"],
  productGallery: ["productGallery"],
  map: ["map"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tilt: typeof Tilt;
  productGallery: typeof CmsGallery;
  map: typeof GoogleMap;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTemp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTemp__VariantsArgs;
    args?: PlasmicTemp__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTemp__Fetches;
  } & Omit<PlasmicTemp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTemp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTemp__ArgProps,
      internalVariantPropNames: PlasmicTemp__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTemp__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTemp";
  } else {
    func.displayName = `PlasmicTemp.${nodeName}`;
  }
  return func;
}

export const PlasmicTemp = Object.assign(
  // Top-level PlasmicTemp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tilt: makeNodeComponent("tilt"),
    productGallery: makeNodeComponent("productGallery"),
    map: makeNodeComponent("map"),

    // Metadata about props expected for PlasmicTemp
    internalVariantProps: PlasmicTemp__VariantProps,
    internalArgProps: PlasmicTemp__ArgProps
  }
);

export default PlasmicTemp;
/* prettier-ignore-end */
